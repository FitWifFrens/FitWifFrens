@page "/Commitments"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using FitWifFrens.Data
@using FitWifFrens.Web.Components.Account
@using Microsoft.EntityFrameworkCore

@inject IdentityUserAccessor UserAccessor
@inject DataContext DataContext

<PageTitle>Commitments</PageTitle>

@if (_commitments != null)
{
    <div class="row">
        <div class="row">
            @foreach (var commitment in _commitments)
            {
                <div class="col-sm-3">
                    <div class="card">
                        <img src="@commitment.Image" class="card-img-top" alt="@commitment.Title">
                        <div class="card-body">
                            <h5 class="card-title">@commitment.Title</h5>
                            <p class="card-text">@commitment.Description</p>
                            @if (commitment.Committed)
                            {
                                <a href="/Commit" class="btn btn-secondary">View</a>
                            }
                            else
                            {
                                <a href="/Commit" class="btn btn-primary">Commit</a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {

    private List<CommitmentData>? _commitments;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var userCommitments = await DataContext.CommittedUsers.Where(cu => cu.UserId == user.Id).ToListAsync();

        var commitments = await DataContext.Commitments.ToListAsync();

        _commitments = commitments.Select(c => new CommitmentData
            {
                Id = c.Id,
                Title = c.Title,
                Description = c.Description,
                Image = c.Image,
                Amount = c.Amount,
                ContractAddress = c.ContractAddress,
                Committed = userCommitments.Any(uc => uc.CommitmentId == c.Id)
            }).OrderBy(c => c.Committed).ToList();
    }


    private class CommitmentData
    {
        public Guid Id { get; set; }

        public string Title { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }

        public int Amount { get; set; }

        public string ContractAddress { get; set; }

        public bool Committed { get; set; }
    }
}