@page "/"

@using FitWifFrens.Data
@using FitWifFrens.Web.Components.Account
@using Microsoft.EntityFrameworkCore

@inject IdentityUserAccessor UserAccessor
@inject DataContext DataContext

<PageTitle>FitWifFrens</PageTitle>

<h1>FitWifFrens!</h1>

<p>Where fitness goals meet a touch of scope creep,<br /> becoming your all-in-one commitment tracker with a side of camaraderie</p>

@if (_commitments != null)
{
    <div class="row">
        <div class="col">
            <h3>Commitments Available</h3>
        </div>
    </div>
    <div class="row">
        @foreach (var commitment in _commitments.OrderBy(c => !c.Committed).ThenBy(c => c.Title))
        {
            <div class="col-sm-3">
                <div class="card">
                    <img src="@commitment.Image" class="card-img-top" alt="@commitment.Title">
                    <div class="card-body">
                        <h5 class="card-title">@commitment.Title</h5>
                        <p class="card-text">@commitment.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

<div class="row mt-5">
    <div class="col">
        <h3>App Connections</h3>
        <p>We currently connect with the below apps</p>
    </div>
</div>
<div class="row">
    <div class="col">
        <img src="images/strava-app.png" alt="Strava" />
        <img src="images/withings-app.png" alt="Strava" />
    </div>
</div>

@code {

    private List<CommitmentData>? _commitments;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetUserAsync(HttpContext);

        var commitments = await DataContext.Commitments
            .Include(c => c.Goals)
            .Include(c => c.Users)
            .ToListAsync();

        if (user == null)
        {
            _commitments = await DataContext.Commitments.Select(c => new CommitmentData
                {
                    Id = c.Id,
                    Title = c.Title,
                    Description = c.Description,
                    Image = c.Image,
                    ContractAddress = c.ContractAddress,
                    Committed = null,
                    HasRequiredProviders = null,
                    TotalCommitted = c.Users.Count
                }).ToListAsync();
        }
        else
        {
            var userCommitments = await DataContext.CommitmentUsers.Where(cu => cu.UserId == user.Id).ToListAsync();

            var userLoginProviders = await DataContext.UserLogins.Where(cu => cu.UserId == user.Id).Select(ul => ul.LoginProvider).ToListAsync();

            _commitments = commitments.Select(c => new CommitmentData
                {
                    Id = c.Id,
                    Title = c.Title,
                    Description = c.Description,
                    Image = c.Image,
                    ContractAddress = c.ContractAddress,
                    Committed = userCommitments.Any(uc => uc.CommitmentId == c.Id),
                    TotalCommitted = c.Users.Count,
                    HasRequiredProviders = c.Goals.All(p => userLoginProviders.Contains(p.ProviderName)),
                    MissingProviders = c.Goals.Where(p => !userLoginProviders.Contains(p.ProviderName)).Select(p => p.ProviderName).Distinct().ToArray()
                }).ToList();
        }
    }


    private class CommitmentData
    {
        public Guid Id { get; set; }

        public string Title { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }

        public int Amount { get; set; }

        public string ContractAddress { get; set; }

        public bool? Committed { get; set; }
        public bool? HasRequiredProviders { get; set; }
        public string[]? MissingProviders { get; set; }
        public int TotalCommitted { get; set; }
    }
}