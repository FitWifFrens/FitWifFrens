@page "/commitments/{CommitmentId:guid}"

@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using FitWifFrens.Web.Components.Account
@using FitWifFrens.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@inject IdentityRedirectManager RedirectManager
@inject IdentityUserAccessor UserAccessor
@inject DataContext DataContext

<PageTitle>Commitment</PageTitle>

<style>
    .bg-image {
        height: 100%;
        width: 100%;
        position: absolute;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        overflow: hidden;
    }

    .bg-overlay {
        position: absolute;
        height: 100%;
        width: 100%;
        background-color: #000;
        opacity: 0.5;
        overflow: hidden;
    }

    .bg-header {
        color: white;
        font-weight: bold;
        line-height: 2;
        z-index: 6;
        position: relative;
    }

    .bg-text {
        color: white;
        line-height: 2;
        z-index: 6;
        position: relative
    }
</style>


@if (_commitment != null)
{
    <div class="card m-1" style="overflow: hidden;">
        <div class="bg-image" style="background-image:url('@_commitment.Image')"></div>
        <div class="bg-overlay"></div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-12">
                    <h2 class="bg-header">@_commitment.Title</h2>
                    <p class="bg-text">@_commitment.Description</p>
                    <p class="bg-text">Requires <strong>@string.Join(", ", _commitment.Metrics)</strong> data</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Total Users:</label>
                        <div class="col-sm-8">
                            @_commitment.TotalUsers
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Total Staked FitDollar:</label>
                        <div class="col-sm-8">
                            @_commitment.TotalStake
                        </div>
                    </div>
                </div>
            </div>

            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <h5 class="card-title">Update FitDollar Stake</h5>
                            <h6 class="card-subtitle mb-2 text-muted">This value will be used as the stake of the next period</h6>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <EditForm Model="Stake" FormName="stake" OnValidSubmit="StakeFitDollar" method="post">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <label class="col-sm-4 col-form-label-md">Stake FitDollar:</label>

                            <div class="col-sm-3">
                                <InputNumber @bind-Value="Stake.Amount" type="number" class="form-control" placeholder="Stake Amount" />
                            </div>

                            <div class="col-sm-3">
                                <button type="submit" class="btn btn-primary">@(_commitment.Stake != null ? "Update Stake" : "Stake")</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <ValidationMessage For="() => Stake.Amount" class="text-danger" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>

            @if (_commitmentPeriod != null && _commitmentPeriod.Goals.Any())
            {
                <div class="card m-1">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <h5 class="card-title">Current Period</h5>
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-sm-4 col-form-label-md">Period:</label>
                            <div class="col-sm-8">
                                @(_commitmentPeriod.StartDate + " - " + _commitmentPeriod.EndDate)
                            </div>

                            <label class="col-sm-4 col-form-label-md">Total Users:</label>
                            <div class="col-sm-8">
                                @_commitmentPeriod.TotalUsers
                            </div>

                            <label class="col-sm-4 col-form-label-md">Total Staked FitDollar:</label>
                            <div class="col-sm-8">
                                @_commitmentPeriod.TotalStake
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <h5 class="card-title">Current Period Goals</h5>
                            </div>
                        </div>
                        @foreach (var userGoal in _commitmentPeriod.Goals.OrderBy(g => g.ProviderName).ThenBy(g => g.MetricType))
                        {
                            <div class="row">
                                <label class="col-sm-4 col-form-label-md">
                                    @(userGoal.MetricName + " " + userGoal.MetricType + " " + userGoal.GoalRule.ToDisplayString() + " " + userGoal.GoalValue)
                                </label>
                                <div class="col-sm-8 fw-bold">
                                    @userGoal.Value
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div>
        @if (_commitmentPeriods != null && _commitmentPeriods.Count > 0)
        {
            <div class="card m-1">
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Stake</th>
                                <th>Reward</th>
                                <th>Total Stake</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var commitmentPeriod in _commitmentPeriods)
                            {
                                <tr class="@(commitmentPeriod.Status == CommitmentPeriodStatus.Current ? "table-primary" : string.Empty)">
                                    <td>@commitmentPeriod.StartDate</td>
                                    <td>@commitmentPeriod.EndDate</td>
                                    <td>@commitmentPeriod.Stake</td>
                                    <td>
                                        @if (commitmentPeriod.Status == CommitmentPeriodStatus.Complete)
                                        {
                                            @commitmentPeriod.Reward
                                        }
                                    </td>
                                    <td>@commitmentPeriod.TotalStake</td>
                                    <td>@commitmentPeriod.Status</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

@code {

    [Parameter]
    public Guid CommitmentId { get; set; }

    [SupplyParameterFromForm]
    private StakeModel Stake { get; set; } = new();

    private string _userId;

    private CommitmentData? _commitment;
    private CommitmentPeriodUserData? _commitmentPeriod;

    private List<CommitmentPeriodUserData>? _commitmentPeriods;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        _userId = user.Id;

        var userCommitments = await DataContext.CommitmentUsers.Where(cu => cu.UserId == _userId).ToListAsync();

        var userLoginProviders = await DataContext.UserLogins.Where(cu => cu.UserId == _userId).Select(ul => ul.LoginProvider).ToListAsync();

        var commitment = await DataContext.Commitments
            .Include(c => c.Goals)
            .Include(c => c.Users).ThenInclude(u => u.User.Logins)
            .SingleAsync(c => c.Id == CommitmentId);

        var commitmentUser = commitment.Users.SingleOrDefault(cu => cu.UserId == _userId);
        var commitmentUsers = commitment.Users;
        var commitmentOtherUsers = commitment.Users.Where(cu => cu.UserId != _userId).ToList();

        _commitment = new CommitmentData
            {
                Id = commitment.Id,
                Title = commitment.Title,
                Description = commitment.Description,
                Image = commitment.Image,
                ContractAddress = commitment.ContractAddress,
                Metrics = commitment.Goals.Select(p => p.MetricName).Distinct().ToArray(),
                Stake = commitmentUser?.Stake,
                TotalUsers = commitmentUsers.Count,
                TotalStake = commitmentUsers.Sum(cpu => cpu.Stake),
            };

        Stake.Amount ??= _commitment.Stake ?? null;

        var commitmentPeriods = await DataContext.CommitmentPeriods
            .Include(cp => cp.Users)
            .Where(cp => cp.CommitmentId == CommitmentId)
            .ToListAsync();

        var now = DateTime.Now;

        _commitmentPeriods = commitmentPeriods.Select(cp =>
        {
            var commitmentPeriodUser = cp.Users.SingleOrDefault(cpu => cpu.UserId == _userId);
            var commitmentPeriodUsers = cp.Users;
            var commitmentPeriodOtherUsers = cp.Users.Where(cpu => cpu.UserId != _userId).ToList();

            return new CommitmentPeriodUserData
                {
                    StartDate = cp.StartDate,
                    EndDate = cp.EndDate,
                    Stake = commitmentPeriodUser?.Stake,
                    Reward = commitmentPeriodUser?.Reward,
                    Status = cp.Status,
                    TotalUsers = commitmentPeriodUsers.Count,
                    TotalStake = commitmentPeriodUsers.Sum(cpu => cpu.Stake),
                };
        }).OrderByDescending(cp => cp.StartDate).ToList();

        _commitmentPeriod = _commitmentPeriods.SingleOrDefault(cp => cp.Status == CommitmentPeriodStatus.Current);

        if (_commitmentPeriod != null)
        {
            var commitmentPeriodUserGoals = await DataContext.CommitmentPeriodUserGoals
                .Include(cpug => cpug.Goal)
                .Where(cpug => cpug.CommitmentId == CommitmentId && cpug.StartDate == _commitmentPeriod.StartDate &&
                               cpug.EndDate == _commitmentPeriod.EndDate && cpug.UserId == _userId).ToListAsync();

            _commitmentPeriod.Goals = commitmentPeriodUserGoals.Select(cpug => new CommitmentPeriodUserGoalData
                {
                    ProviderName = cpug.ProviderName,
                    MetricName = cpug.MetricName,
                    MetricType = cpug.MetricType,
                    GoalRule = cpug.Goal.Rule,
                    GoalValue = cpug.Goal.Value,
                    Value = cpug.Value,
                }).ToList();
        }
    }

    private sealed class StakeModel
    {
        [Required]
        [Range(0, 100)]
        public decimal? Amount { get; set; }
    }

    private async Task StakeFitDollar()
    {
        var commitmentUser = await DataContext.CommitmentUsers.SingleOrDefaultAsync(cu => cu.CommitmentId == CommitmentId && cu.UserId == _userId);
        if (Stake.Amount == 0)
        {
            if (commitmentUser != null)
            {
                DataContext.Entry(commitmentUser).State = EntityState.Deleted;

                await DataContext.SaveChangesAsync();
            }
        }
        else
        {
            if (commitmentUser != null)
            {
                if (commitmentUser.Stake != Stake.Amount)
                {
                    commitmentUser.Stake = Stake.Amount!.Value;

                    DataContext.Entry(commitmentUser).State = EntityState.Modified;

                    await DataContext.SaveChangesAsync();
                }
            }
            else
            {
                DataContext.CommitmentUsers.Add(new CommitmentUser
                    {
                        CommitmentId = CommitmentId,
                        UserId = _userId,
                        Stake = Stake.Amount!.Value,
                    });

                await DataContext.SaveChangesAsync();
            }
        }

        RedirectManager.RedirectToCurrentPage();
    }

    private class CommitmentData
    {
        public Guid Id { get; set; }

        public string Title { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }

        public string ContractAddress { get; set; }

        public string[] Metrics { get; set; }

        public decimal? Stake { get; set; }

        public int TotalUsers { get; set; }
        public decimal TotalStake { get; set; }
    }

    private class CommitmentPeriodUserData
    {
        public DateOnly StartDate { get; set; }
        public DateOnly EndDate { get; set; }

        public decimal? Stake { get; set; }
        public decimal? Reward { get; set; }
        public ICollection<CommitmentPeriodUserGoalData> Goals { get; set; }

        public CommitmentPeriodStatus Status { get; set; }
        public int TotalUsers { get; set; }
        public decimal TotalStake { get; set; }
    }

    private class CommitmentPeriodUserGoalData
    {
        public string ProviderName { get; set; }
        public string MetricName { get; set; }
        public MetricType MetricType { get; set; }
        public GoalRule GoalRule { get; set; }
        public double GoalValue { get; set; }
        public double? Value { get; set; } // TODO: Measure?
    }
}