@page "/Account/Manage/ExternalLogins"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FitWifFrens.Data
@using FitWifFrens.Web.Background
@using Hangfire
@using Microsoft.EntityFrameworkCore

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<User> UserStore
@inject IdentityRedirectManager RedirectManager
@inject DataContext DataContext
@inject IBackgroundJobClient BackgroundJobClient

<PageTitle>Manage your external logins</PageTitle>

<style>
    button.btn-img {
        padding: 0
    }

    img.btn-img {
        height: 33.5px;
    }
</style>

<StatusMessage />
@if (currentLogins?.Count > 0)
{
    <h3>Registered Logins</h3>
    <table class="table">
        <tbody>
            @foreach (var login in currentLogins)
            {
                <tr>
                    <td>@login.ProviderDisplayName</td>
                    <td>
                        @if (showRemoveButton)
                        {
                            <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                                <AntiforgeryToken />
                                <div>
                                    <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                                    <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                                    <button type="submit" class="btn btn-danger" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
                                </div>
                            </form>
                        }
                        else
                        {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (otherLogins?.Count > 0)
{
    <h4>Add another service to commit to more commitments.</h4>
    <hr />
    <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
        <AntiforgeryToken />
        <div>
            <p>
                @foreach (var provider in otherLogins)
                {
                    <button type="submit" class="btn @(provider.DisplayName == "Strava" ? "btn-link btn-img" : "btn-primary")" style="margin-right: 5px;" name="Provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                        @if (provider.DisplayName == "Strava")
                        {
                            <img class="btn-img" src="images/strava.png" alt="@provider.DisplayName" />
                        }
                        else
                        {
                            @provider.DisplayName
                        }
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private User user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<User> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // TODO: this saves the tokens?
        _ = await SignInManager.UpdateExternalAuthenticationTokensAsync(info);

        var metricProviders = await DataContext.MetricProviders.Where(mp => mp.ProviderName == info.LoginProvider).ToListAsync();

        var userMetricProviders = await DataContext.UserMetricProviders.Where(ump => ump.UserId == userId).ToListAsync();

        foreach (var metricProvider in metricProviders)
        {
            var userMetricProvider = userMetricProviders.SingleOrDefault(ump => ump.MetricName == metricProvider.MetricName);
            if (userMetricProvider != null)
            {
                userMetricProvider.ProviderName = metricProvider.ProviderName;

                DataContext.Entry(userMetricProvider).State = EntityState.Modified;
            }
            else
            {
                DataContext.UserMetricProviders.Add(new UserMetricProvider
                    {
                        UserId = userId,
                        MetricName = metricProvider.MetricName,
                        ProviderName = metricProvider.ProviderName,
                    });
            }
        }

        await DataContext.SaveChangesAsync();

        if (info.LoginProvider == "Strava")
        {
            BackgroundJobClient.Enqueue<StravaService>(s => s.UpdateProviderMetricValues(info.ProviderKey, CancellationToken.None));
        }
        else if (info.LoginProvider == "Withings")
        {
            BackgroundJobClient.Enqueue<WithingsService>(s => s.UpdateWebhook(info.ProviderKey, CancellationToken.None));
            BackgroundJobClient.Enqueue<WithingsService>(s => s.UpdateProviderMetricValues(info.ProviderKey, CancellationToken.None));
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme); // TODO: Am i using this to sign in???

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }
}
