@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

@implements IDisposable;
@inject IJSRuntime jsRuntime;
@inject SelectedEthereumHostProviderService selectedHostProviderService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _siweAuthenticationStateProvider;
@using Nethereum.Hex.HexTypes;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FitWifFrens.Web.Client.Contract.TokenStaking
@using Microsoft.AspNetCore.Authorization
@using Nethereum.RPC.HostWallet
@using System.Numerics
@using FitWifFrens.Web.Client.Contract.Token


<AuthorizeView Roles="EthereumConnected">
    <Authorized>
        @if (SelectedChainId != 84532)
        {
            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Connect to Base Sepolia</label>
                        <div class="col-sm-8">
                            <button @onclick="@AddChain" class="btn btn-primary">Add Chain (Base Sepolia)</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">WorldId:</label>
                        <div class="col-sm-8">
                            @WorldId
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Selected Account:</label>
                        <div class="col-sm-8">
                            @SelectedAccount
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Contract Address:</label>
                        <div class="col-sm-8">
                            @ContractAddress
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Selected Network ChainId:</label>
                        <div class="col-sm-8">
                            @SelectedChainId
                        </div>
                    </div>
                </div>
            </div>

            @if (TotalStaked > 0)
            {
                <div class="card m-1">
                    <div class="card-body">
                        <div class="row">
                            <label class="col-sm-4 col-form-label-md">Total Staked FitDollar:</label>
                            <div class="col-sm-8">
                                <strong>
                                    @TotalStaked
                                </strong>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (SelectedAccountHasAllowance == true)
            {
                @if (SelectedAccountTotalStaked > 0)
                {
                    <div class="card m-1">
                        <div class="card-body">
                            <div class="row">
                                <label class="col-sm-4 col-form-label-md">Your Staked FitDollar:</label>
                                <div class="col-sm-2">
                                    <strong>
                                        @SelectedAccountTotalStaked
                                    </strong>
                                </div>
                                @if (StakeComplete)
                                {
                                    <div class="col-sm-3">
                                        <button @onclick="@WithdrawAll" class="btn btn-info">Withdraw All</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (SelectedAccountRewardTokens > 0)
                {
                    <div class="card m-1">
                        <div class="card-body">
                            <div class="row">
                                <label class="col-sm-4 col-form-label-md">Your FitDollar Rewards:</label>
                                <div class="col-sm-2">
                                    <strong>
                                        @SelectedAccountRewardTokens
                                    </strong>
                                </div>
                                <div class="col-sm-3">
                                    <button @onclick="@WithdrawRewards" class="btn btn-info">Withdraw Rewards</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="card m-1">
                    <div class="card-body">
                        <div class="row">
                            <label class="col-sm-4 col-form-label-md">Stake FitDollar:</label>

                            <div class="col-sm-2">
                                <InputNumber @bind-Value="StakeAmount" type="number" class="form-control" placeholder="10" />
                            </div>

                            <div class="col-sm-3">
                                <button @onclick="@StakeFitDollar" class="btn btn-primary">Stake</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card m-1">
                    <div class="card-body">
                        <div class="row">
                            <label class="col-sm-4 col-form-label-md">Allow FitDollar:</label>

                            <div class="col-sm-3">
                                <button @onclick="@AllowFitDollar" class="btn btn-primary">Allow</button>
                            </div>
                        </div>
                    </div>
                </div>
            }

        }

    </Authorized>
    <NotAuthorized>
        <div>
            Please connect to Ethereum !
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string WorldId { get; set; }

    [Parameter]
    public string ContractAddress { get; set; }

    public int StakeAmount { get; set; } = 50;

    [CascadingParameter]
    public Task<AuthenticationState?> AuthenticationState { get; set; }

    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    long SelectedChainId { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }
    string ErrorAuthenticateMessage { get; set; }
    string UserName { get; set; }
    protected string AuthenticatedAccount { get; set; }
    bool SelectedAccountHasAllowance { get; set; }
    BigInteger SelectedAccountTotalStaked { get; set; }
    BigInteger SelectedAccountRewardTokens { get; set; }
    BigInteger TotalStaked { get; set; }
    BigInteger ChallengerCount { get; set; }
    bool StakeComplete { get; set; }
    IEthereumHostProvider _ethereumHostProvider;

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = selectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged -= HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged -= HostProviderOnEnabledChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            await GetChainId();
        }

        var authState = await AuthenticationState;
        if (authState != null)
        {
            UserName = authState.User.FindFirst(c => c.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        }
    }

    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            StateHasChanged();
        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (long)chainId.Value;

        if (SelectedChainId == 84532)
        {
            await LoadStakingData();
        }
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await GetChainId();
        StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(long chainId)
    {
        SelectedChainId = chainId;
        StateHasChanged();
    }


    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    protected async Task LoadStakingData()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var tokenService = new TokenService(web3, Constants.TokenAddress);

        SelectedAccountHasAllowance = await tokenService.AllowanceQueryAsync(SelectedAccount, ContractAddress) > 0;

        var tokenStakingService = new TokenStakingService(web3, ContractAddress);

        SelectedAccountTotalStaked = await tokenStakingService.StakedTokensQueryAsync(SelectedAccount) / Constants.TokenDecimals;
        SelectedAccountRewardTokens = await tokenStakingService.RewardTokensQueryAsync(SelectedAccount) / Constants.TokenDecimals;
        ChallengerCount = await tokenStakingService.ChallengerCountQueryAsync();
        TotalStaked = await tokenStakingService.TotalStakedQueryAsync() / Constants.TokenDecimals;

        StakeComplete = await tokenStakingService.StakeCompleteQueryAsync(SelectedAccount);
    }

    protected async Task AllowFitDollar()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var tokenService = new TokenService(web3, Constants.TokenAddress);

        var transactionReceipt = await tokenService.IncreaseAllowanceRequestAndWaitForReceiptAsync(ContractAddress, Constants.IncreaseAllowance);

        await LoadStakingData();
    }

    protected async Task StakeFitDollar()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var tokenStakingService = new TokenStakingService(web3, ContractAddress);

        var transactionReceipt = await tokenStakingService.CreatePledgeRequestAndWaitForReceiptAsync(StakeAmount * Constants.TokenDecimals, WorldId);

        await LoadStakingData();
    }

    protected async Task WithdrawAll()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var tokenStakingService = new TokenStakingService(web3, ContractAddress);

        var transactionReceipt = await tokenStakingService.WithdrawAllRequestAndWaitForReceiptAsync();

        await LoadStakingData();
    }

    protected async Task WithdrawRewards()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var tokenStakingService = new TokenStakingService(web3, ContractAddress);

        var transactionReceipt = await tokenStakingService.WithdrawRewardsRequestAndWaitForReceiptAsync();

        await LoadStakingData();
    }

    protected async Task AddChain()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var baseSepolia = new AddEthereumChainParameter
            {
                ChainId = new HexBigInteger(84532),
                ChainName = "Base Sepolia",
                NativeCurrency = new NativeCurrency
                {
                    Decimals = 18,
                    Name = "ETH",
                    Symbol = "ETH"
                },
                RpcUrls = new List<string> { "https://sepolia.base.org" },
                BlockExplorerUrls = new List<string> { "https://base-sepolia.blockscout.com" },
            };

        try
        {
            var result = await web3.Eth.HostWallet.AddEthereumChain.SendRequestAsync(baseSepolia);
        }
        catch
        {
            // Ignore
        }
    }
}


