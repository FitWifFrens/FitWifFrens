@page "/Commit/{ContractAddress}"
@attribute [Authorize]
@rendermode InteractiveWebAssembly

@implements IDisposable;
@inject IJSRuntime jsRuntime;
@inject SelectedEthereumHostProviderService selectedHostProviderService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _siweAuthenticationStateProvider;
@using Nethereum.Hex.HexTypes;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FitWifFrens.Web.Client.Contract.TokenStaking
@using Microsoft.AspNetCore.Authorization
@using Nethereum.RPC.HostWallet


<AuthorizeView Roles="EthereumConnected">
    <Authorized>
        @if (SelectedChainId != 84532)
        {
            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Connect to Base Sepolia</label>
                        <div class="col-sm-6">
                            <button @onclick="@AddChain">Add Chain (Base Sepolia)</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Selected Account:</label>
                        <div class="col-sm-6">
                            @SelectedAccount
                            <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the host (ie Metamask) on change</small>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Selected Network ChainId:</label>
                        <div class="col-sm-6">
                            @SelectedChainId
                            <small id="selectedAccountHelp" class="form-text text-muted">The selected chain Id</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Block hash of block number 0:</label>
                        <div class="col-sm-6">
                            <button @onclick="@GetBlockHashAsync">Get BlockHash</button>
                            <div>@BlockHash</div>
                            <small id="selectedAccountHelp" class="form-text text-muted">With Metamask calls are redirected to its configured node (i.e http://localhost:8545)</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card m-1">
                <div class="card-body">
                    <div class="row">
                        <label class="col-sm-4 col-form-label-md">Stake FitDollar:</label>
                        <div class="col-sm-6">
                            <button @onclick="@StakeFitDollar">Stake</button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <div>
            Please connect to Ethereum !
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public string ContractAddress { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    long SelectedChainId { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }
    string ErrorAuthenticateMessage { get; set; }
    string UserName { get; set; }
    protected string AuthenticatedAccount { get; set; }
    IEthereumHostProvider _ethereumHostProvider;

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = selectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged -= HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged -= HostProviderOnEnabledChanged;
    }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            await GetChainId();
        }

        var authState = await AuthenticationState; ;
        if (authState != null)
        {
            UserName = authState.User.FindFirst(c => c.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        }
    }

    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            this.StateHasChanged();
        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (long)chainId.Value;
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await GetChainId();
        this.StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(long chainId)
    {
        SelectedChainId = chainId;
        this.StateHasChanged();
    }


    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }


    protected async Task AddChain()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var optimismChain = new AddEthereumChainParameter()
            {
                ChainId = new HexBigInteger(84532),
                ChainName = "Base Sepolia",
                NativeCurrency = new NativeCurrency()
                {
                    Decimals = 18,
                    Name = "ETH",
                    Symbol = "ETH"
                },
                RpcUrls = new List<string> { "https://sepolia.base.org" },
                BlockExplorerUrls = new List<string> { "https://base-sepolia.blockscout.com" },
            };
        try
        {
            var result = await web3.Eth.HostWallet.AddEthereumChain.SendRequestAsync(optimismChain);
        }
        catch (Exception ex)
        {

        }
    }

    protected async Task StakeFitDollar()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();

        var tokenStakingService = new TokenStakingService(web3, ContractAddress);

        var x = await tokenStakingService.TotalStakedQueryAsync();

        Console.WriteLine($"TotalStaked {x}");

        var x1 = await tokenStakingService.StakeTokenRequestAsync(1);
    }

}


